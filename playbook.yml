---
- name: Pre-flight Checks
  hosts: kubernetes
  gather_facts: no
  tasks:
    - name: Check if hosts are reachable
      wait_for_connection:
        timeout: 30
      register: ping_result

    - name: Verify all hosts are reachable
      assert:
        that:
          - ping_result is success
        fail_msg: "Unable to reach {{ inventory_hostname }} ({{ ansible_host }}). Please check network connectivity and SSH configuration."
        success_msg: "Successfully connected to {{ inventory_hostname }} ({{ ansible_host }})"

- name: Setup Kubernetes Cluster
  hosts: kubernetes
  become: yes
  tasks:
    - name: Update hostname
      hostname:
        name: "{{ new_hostname }}"
      
    - name: Update /etc/hosts
      blockinfile:
        path: /etc/hosts
        block: |
          192.168.0.30 kube-master-0
          192.168.0.40 kube-slave-0
          192.168.0.41 kube-slave-1
          192.168.0.42 kube-slave-2
        marker: "# {mark} KUBERNETES NODES"

    - name: Install required system packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
          - gnupg2
        state: present
        update_cache: yes

    - name: Disable swap
      command: swapoff -a
      
    - name: Remove swap entry from /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Enable kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Configure kernel parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        sysctl_set: yes
        reload: yes
      loop:
        - { name: "net.bridge.bridge-nf-call-iptables", value: "1" }
        - { name: "net.bridge.bridge-nf-call-ip6tables", value: "1" }
        - { name: "net.ipv4.ip_forward", value: "1" }

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Kubernetes GPG key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/k8s.gpg
      args:
        creates: /etc/apt/keyrings/k8s.gpg

    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/k8s.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /"
        state: present
        filename: kubernetes
        update_cache: yes


    - name: Install containerd
      apt:
        name: containerd
        state: present
        update_cache: yes

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory

    - name: Configure containerd
      shell: |
        containerd config default > /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

    - name: Restart containerd
      service:
        name: containerd
        state: restarted
        enabled: yes

    - name: Install Kubernetes components
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Enable kubelet service
      service:
        name: kubelet
        enabled: yes

- name: Initialize Kubernetes master
  hosts: kubernetes_master
  become: yes
  vars_prompt:
    - name: "pod_network_cidr"
      prompt: "Enter Pod Network CIDR (default: 10.69.0.0/16)"
      private: no
      default: "10.69.0.0/16"
    - name: "apiserver_advertise_ip"
      prompt: "Enter API Server Advertise IP (default: {{ hostvars[groups['kubernetes_master'][0]]['ansible_host'] }})"
      private: no
      default: "{{ hostvars[groups['kubernetes_master'][0]]['ansible_host'] }}"
  tasks:
    - name: Initialize Kubernetes cluster
      command: >
        kubeadm init 
        --pod-network-cidr={{ pod_network_cidr }}
        --apiserver-advertise-address={{ apiserver_advertise_ip }}
        --cri-socket unix:///run/containerd/containerd.sock
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Create .kube directory
      file:
        path: /root/.kube
        state: directory
        mode: '0755'

    - name: Copy admin.conf to .kube directory
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes

    - name: Fetch kubeconfig to Ansible control node
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: ./kubeconfig
        flat: yes
        
    - name: Install Calico CNI
      command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/calico.yaml
      
    - name: Get join command
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Store join command
      set_fact:
        join_command: "{{ join_command.stdout_lines[0] }} --cri-socket unix:///run/containerd/containerd.sock"

- name: Join worker nodes
  hosts: kubernetes_workers
  become: yes
  tasks:
    - name: Join cluster
      command: "{{ hostvars[groups['kubernetes_master'][0]]['join_command'] }}"
      args:
        creates: /etc/kubernetes/kubelet.conf

